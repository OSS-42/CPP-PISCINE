/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   SchrubberyCreationForm.cpp                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ewurstei <ewurstei@student.42quebec.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/09 16:10:23 by ewurstei          #+#    #+#             */
/*   Updated: 2023/05/10 16:22:38 by ewurstei         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

# include "../inc/SchrubberyCreationForm.hpp"

// ------ CANNON -------
SchrubberyCreationForm::SchrubberyCreationForm(std::string target) : AForm(target, 145, 137) {
	std::cout << GRN "Schrubbery Creation Form generated" NC << std::endl;
}

// SchrubberyCreationForm::SchrubberyCreationForm(const SchrubberyCreationForm& other) {
// 	*this = other;
// }

// SchrubberyCreationForm& SchrubberyCreationForm::operator=(const SchrubberyCreationForm& rhs) {
// 	if (this == &rhs)
// 		return (*this);

// 	return (*this);
// }

SchrubberyCreationForm::~SchrubberyCreationForm(void) {
	std::cout << RED "Schrubbery Creation Form deleted" NC << std::endl;
}

// ------- MEMBER FUNCTIONS --------

std::string SchrubberyCreationForm::getTarget(void) const {
	return (this->getName());
}

void SchrubberyCreationForm::execute (const Bureaucrat& executor) const {
	if (executor.getGrade() > this->getGrade())
		throw AForm::GradeTooLowException();
	else {
		std::string extension = "_schrubbery";
		std::string filename = this->getTarget() + extension;
		std::ofstream outFile;
		outFile.open(filename);
		if (outFile.is_open() == false) {
			std::cout << "error: cannot open file: " << filename << std::endl;
			outFile.close();
			return;
		} else {
			outFile << 
			"###########################'`################################\n" <<
			"###########################  V##'############################\n" <<
			"#########################V'  `V  ############################\n" <<
			"########################V'      ,############################\n" <<
			"#########`#############V      ,A###########################V#\n" <<
			"########' `###########V      ,###########################V',#\n" <<
			"######V'   ###########l      ,####################V~~~~'',###\n" <<
			"#####V'    ###########l      ##P' ###########V~~'   ,A#######\n" <<
			"#####l      d#########l      V'  ,#######V~'       A#########\n" <<
			"#####l      ##########l         ,####V''         ,###########\n" <<
			"#####l        `V######l        ,###V'   .....;A##############\n" <<
			"#####A,         `######A,     ,##V' ,A#######################\n" <<
			"#######A,        `######A,    #V'  A########'''''##########''\n" <<
			"##########,,,       `####A,           `#''           '''  ,,,\n" <<
			"#############A,                               ,,,     ,######\n" <<
			"######################oooo,                 ;####, ,#########\n" <<
			"##################P'                   A,   ;#####V##########\n" <<
			"#####P'    ''''       ,###             `#,     `V############\n" <<
			"##P'                ,d###;              ##,       `V#########\n" <<
			"##########A,,   #########A              )##,    ##A,..,ooA###\n" <<
			"#############A, Y#########A,            )####, ,#############\n" <<
			"###############A ############A,        ,###### ##############\n" <<
			"###############################       ,#######V##############\n" <<
			"###############################      ,#######################\n" <<
			"##############################P    ,d########################\n" <<
			"##############################'    d#########################\n" <<
			"##############################     ##########################\n" <<
			"##############################     ##########################\n" <<
			"#############################P     ##########################\n" <<
			"#############################'     ##########################\n" <<
			"############################P      ##########################\n" <<
			"###########################P'     ;##########################\n" <<
			"###########################'     ,###########################\n" <<
			"##########################       ############################\n" <<
			"#########################       ,############################\n" <<
			"########################        d###########P'    `Y#########\n" <<
			"#######################        ,############        #########\n" <<
			"######################        ,#############        #########\n" <<
			"#####################        ,##############b.    ,d#########\n" <<
			"####################        ,################################\n" <<
			"###################         #################################\n" <<
			"##################          #######################P'  `V##P'\n" <<
			"#######P'     `V#           ###################P'			 \n" <<
			"#####P'                    ,#################P'				 \n" <<
			"###P'                      d##############P''				 \n" <<
			"##P'                       V##############'					 \n" <<
			"#P'                         `V###########'					 \n" <<
			"#'                             `V##P'						 \n" <<
			"														GNN94" << std::endl;
			outFile.close();
		}
	}
}